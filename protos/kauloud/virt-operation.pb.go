// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: virt-operation.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VirtualMachineSpec_Type int32

const (
	VirtualMachineSpec_CPU VirtualMachineSpec_Type = 0
	VirtualMachineSpec_GPU VirtualMachineSpec_Type = 1
)

// Enum value maps for VirtualMachineSpec_Type.
var (
	VirtualMachineSpec_Type_name = map[int32]string{
		0: "CPU",
		1: "GPU",
	}
	VirtualMachineSpec_Type_value = map[string]int32{
		"CPU": 0,
		"GPU": 1,
	}
)

func (x VirtualMachineSpec_Type) Enum() *VirtualMachineSpec_Type {
	p := new(VirtualMachineSpec_Type)
	*p = x
	return p
}

func (x VirtualMachineSpec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualMachineSpec_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_virt_operation_proto_enumTypes[0].Descriptor()
}

func (VirtualMachineSpec_Type) Type() protoreflect.EnumType {
	return &file_virt_operation_proto_enumTypes[0]
}

func (x VirtualMachineSpec_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualMachineSpec_Type.Descriptor instead.
func (VirtualMachineSpec_Type) EnumDescriptor() ([]byte, []int) {
	return file_virt_operation_proto_rawDescGZIP(), []int{3, 0}
}

type DummyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok         bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Additional string `protobuf:"bytes,2,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (x *DummyResult) Reset() {
	*x = DummyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virt_operation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyResult) ProtoMessage() {}

func (x *DummyResult) ProtoReflect() protoreflect.Message {
	mi := &file_virt_operation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyResult.ProtoReflect.Descriptor instead.
func (*DummyResult) Descriptor() ([]byte, []int) {
	return file_virt_operation_proto_rawDescGZIP(), []int{0}
}

func (x *DummyResult) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *DummyResult) GetAdditional() string {
	if x != nil {
		return x.Additional
	}
	return ""
}

type DummyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DummyRequest) Reset() {
	*x = DummyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virt_operation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyRequest) ProtoMessage() {}

func (x *DummyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virt_operation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyRequest.ProtoReflect.Descriptor instead.
func (*DummyRequest) Descriptor() ([]byte, []int) {
	return file_virt_operation_proto_rawDescGZIP(), []int{1}
}

type VmCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                string              `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	VirtualMachineSpec *VirtualMachineSpec `protobuf:"bytes,2,opt,name=virtual_machine_spec,json=virtualMachineSpec,proto3" json:"virtual_machine_spec,omitempty"`
}

func (x *VmCreationRequest) Reset() {
	*x = VmCreationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virt_operation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmCreationRequest) ProtoMessage() {}

func (x *VmCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virt_operation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmCreationRequest.ProtoReflect.Descriptor instead.
func (*VmCreationRequest) Descriptor() ([]byte, []int) {
	return file_virt_operation_proto_rawDescGZIP(), []int{2}
}

func (x *VmCreationRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *VmCreationRequest) GetVirtualMachineSpec() *VirtualMachineSpec {
	if x != nil {
		return x.VirtualMachineSpec
	}
	return nil
}

type VirtualMachineSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cores                  int32                `protobuf:"varint,1,opt,name=cores,proto3" json:"cores,omitempty"`
	MemoryInGb             int32                `protobuf:"varint,2,opt,name=memory_in_gb,json=memoryInGb,proto3" json:"memory_in_gb,omitempty"`
	EphemeralStorageInGb   int32                `protobuf:"varint,3,opt,name=ephemeral_storage_in_gb,json=ephemeralStorageInGb,proto3" json:"ephemeral_storage_in_gb,omitempty"`
	RootDataVolumeSizeInGb string               `protobuf:"bytes,4,opt,name=root_data_volume_size_in_gb,json=rootDataVolumeSizeInGb,proto3" json:"root_data_volume_size_in_gb,omitempty"`
	Image                  string               `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	CloudInitUserData      []*CloudInitUserData `protobuf:"bytes,6,rep,name=cloud_init_user_data,json=cloudInitUserData,proto3" json:"cloud_init_user_data,omitempty"`
}

func (x *VirtualMachineSpec) Reset() {
	*x = VirtualMachineSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virt_operation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineSpec) ProtoMessage() {}

func (x *VirtualMachineSpec) ProtoReflect() protoreflect.Message {
	mi := &file_virt_operation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineSpec.ProtoReflect.Descriptor instead.
func (*VirtualMachineSpec) Descriptor() ([]byte, []int) {
	return file_virt_operation_proto_rawDescGZIP(), []int{3}
}

func (x *VirtualMachineSpec) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *VirtualMachineSpec) GetMemoryInGb() int32 {
	if x != nil {
		return x.MemoryInGb
	}
	return 0
}

func (x *VirtualMachineSpec) GetEphemeralStorageInGb() int32 {
	if x != nil {
		return x.EphemeralStorageInGb
	}
	return 0
}

func (x *VirtualMachineSpec) GetRootDataVolumeSizeInGb() string {
	if x != nil {
		return x.RootDataVolumeSizeInGb
	}
	return ""
}

func (x *VirtualMachineSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *VirtualMachineSpec) GetCloudInitUserData() []*CloudInitUserData {
	if x != nil {
		return x.CloudInitUserData
	}
	return nil
}

type CloudInitUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CloudInitUserData) Reset() {
	*x = CloudInitUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virt_operation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudInitUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudInitUserData) ProtoMessage() {}

func (x *CloudInitUserData) ProtoReflect() protoreflect.Message {
	mi := &file_virt_operation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudInitUserData.ProtoReflect.Descriptor instead.
func (*CloudInitUserData) Descriptor() ([]byte, []int) {
	return file_virt_operation_proto_rawDescGZIP(), []int{4}
}

func (x *CloudInitUserData) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CloudInitUserData) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_virt_operation_proto protoreflect.FileDescriptor

var file_virt_operation_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a,
	0x0b, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x0e, 0x0a, 0x0c,
	0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x11,
	0x56, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x12, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x22, 0xbb, 0x02, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x47, 0x62, 0x12,
	0x35, 0x0a, 0x17, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x3b, 0x0a, 0x1b, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x6f, 0x6f,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49,
	0x6e, 0x47, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x14, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x18, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x50, 0x55, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x10, 0x01, 0x22, 0x43,
	0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x32, 0xa0, 0x04, 0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_virt_operation_proto_rawDescOnce sync.Once
	file_virt_operation_proto_rawDescData = file_virt_operation_proto_rawDesc
)

func file_virt_operation_proto_rawDescGZIP() []byte {
	file_virt_operation_proto_rawDescOnce.Do(func() {
		file_virt_operation_proto_rawDescData = protoimpl.X.CompressGZIP(file_virt_operation_proto_rawDescData)
	})
	return file_virt_operation_proto_rawDescData
}

var file_virt_operation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_virt_operation_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_virt_operation_proto_goTypes = []interface{}{
	(VirtualMachineSpec_Type)(0), // 0: proto.VirtualMachineSpec.Type
	(*DummyResult)(nil),          // 1: proto.DummyResult
	(*DummyRequest)(nil),         // 2: proto.DummyRequest
	(*VmCreationRequest)(nil),    // 3: proto.VmCreationRequest
	(*VirtualMachineSpec)(nil),   // 4: proto.VirtualMachineSpec
	(*CloudInitUserData)(nil),    // 5: proto.CloudInitUserData
}
var file_virt_operation_proto_depIdxs = []int32{
	4,  // 0: proto.VmCreationRequest.virtual_machine_spec:type_name -> proto.VirtualMachineSpec
	5,  // 1: proto.VirtualMachineSpec.cloud_init_user_data:type_name -> proto.CloudInitUserData
	3,  // 2: proto.VirtManagementService.CreateVirtualMachine:input_type -> proto.VmCreationRequest
	2,  // 3: proto.VirtManagementService.DeleteVirtualMachine:input_type -> proto.DummyRequest
	2,  // 4: proto.VirtManagementService.StartVirtualMachine:input_type -> proto.DummyRequest
	2,  // 5: proto.VirtManagementService.StopVirtualMachine:input_type -> proto.DummyRequest
	2,  // 6: proto.VirtManagementService.RestartVirtualMachine:input_type -> proto.DummyRequest
	2,  // 7: proto.VirtManagementService.ListVirtualMachine:input_type -> proto.DummyRequest
	2,  // 8: proto.VirtManagementService.ListVirtualMachineInstance:input_type -> proto.DummyRequest
	2,  // 9: proto.VirtManagementService.ListDataVolume:input_type -> proto.DummyRequest
	1,  // 10: proto.VirtManagementService.CreateVirtualMachine:output_type -> proto.DummyResult
	1,  // 11: proto.VirtManagementService.DeleteVirtualMachine:output_type -> proto.DummyResult
	1,  // 12: proto.VirtManagementService.StartVirtualMachine:output_type -> proto.DummyResult
	1,  // 13: proto.VirtManagementService.StopVirtualMachine:output_type -> proto.DummyResult
	1,  // 14: proto.VirtManagementService.RestartVirtualMachine:output_type -> proto.DummyResult
	1,  // 15: proto.VirtManagementService.ListVirtualMachine:output_type -> proto.DummyResult
	1,  // 16: proto.VirtManagementService.ListVirtualMachineInstance:output_type -> proto.DummyResult
	1,  // 17: proto.VirtManagementService.ListDataVolume:output_type -> proto.DummyResult
	10, // [10:18] is the sub-list for method output_type
	2,  // [2:10] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_virt_operation_proto_init() }
func file_virt_operation_proto_init() {
	if File_virt_operation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_virt_operation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virt_operation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virt_operation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmCreationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virt_operation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virt_operation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudInitUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_virt_operation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_virt_operation_proto_goTypes,
		DependencyIndexes: file_virt_operation_proto_depIdxs,
		EnumInfos:         file_virt_operation_proto_enumTypes,
		MessageInfos:      file_virt_operation_proto_msgTypes,
	}.Build()
	File_virt_operation_proto = out.File
	file_virt_operation_proto_rawDesc = nil
	file_virt_operation_proto_goTypes = nil
	file_virt_operation_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VirtManagementServiceClient is the client API for VirtManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VirtManagementServiceClient interface {
	CreateVirtualMachine(ctx context.Context, in *VmCreationRequest, opts ...grpc.CallOption) (*DummyResult, error)
	DeleteVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error)
	StartVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error)
	StopVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error)
	RestartVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error)
	ListVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error)
	ListVirtualMachineInstance(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error)
	ListDataVolume(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error)
}

type virtManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtManagementServiceClient(cc grpc.ClientConnInterface) VirtManagementServiceClient {
	return &virtManagementServiceClient{cc}
}

func (c *virtManagementServiceClient) CreateVirtualMachine(ctx context.Context, in *VmCreationRequest, opts ...grpc.CallOption) (*DummyResult, error) {
	out := new(DummyResult)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/CreateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) DeleteVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error) {
	out := new(DummyResult)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/DeleteVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) StartVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error) {
	out := new(DummyResult)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/StartVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) StopVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error) {
	out := new(DummyResult)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/StopVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) RestartVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error) {
	out := new(DummyResult)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/RestartVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) ListVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error) {
	out := new(DummyResult)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/ListVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) ListVirtualMachineInstance(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error) {
	out := new(DummyResult)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/ListVirtualMachineInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) ListDataVolume(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResult, error) {
	out := new(DummyResult)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/ListDataVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtManagementServiceServer is the server API for VirtManagementService service.
type VirtManagementServiceServer interface {
	CreateVirtualMachine(context.Context, *VmCreationRequest) (*DummyResult, error)
	DeleteVirtualMachine(context.Context, *DummyRequest) (*DummyResult, error)
	StartVirtualMachine(context.Context, *DummyRequest) (*DummyResult, error)
	StopVirtualMachine(context.Context, *DummyRequest) (*DummyResult, error)
	RestartVirtualMachine(context.Context, *DummyRequest) (*DummyResult, error)
	ListVirtualMachine(context.Context, *DummyRequest) (*DummyResult, error)
	ListVirtualMachineInstance(context.Context, *DummyRequest) (*DummyResult, error)
	ListDataVolume(context.Context, *DummyRequest) (*DummyResult, error)
}

// UnimplementedVirtManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVirtManagementServiceServer struct {
}

func (*UnimplementedVirtManagementServiceServer) CreateVirtualMachine(context.Context, *VmCreationRequest) (*DummyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) DeleteVirtualMachine(context.Context, *DummyRequest) (*DummyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) StartVirtualMachine(context.Context, *DummyRequest) (*DummyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) StopVirtualMachine(context.Context, *DummyRequest) (*DummyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) RestartVirtualMachine(context.Context, *DummyRequest) (*DummyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) ListVirtualMachine(context.Context, *DummyRequest) (*DummyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) ListVirtualMachineInstance(context.Context, *DummyRequest) (*DummyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachineInstance not implemented")
}
func (*UnimplementedVirtManagementServiceServer) ListDataVolume(context.Context, *DummyRequest) (*DummyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataVolume not implemented")
}

func RegisterVirtManagementServiceServer(s *grpc.Server, srv VirtManagementServiceServer) {
	s.RegisterService(&_VirtManagementService_serviceDesc, srv)
}

func _VirtManagementService_CreateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).CreateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/CreateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).CreateVirtualMachine(ctx, req.(*VmCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_DeleteVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).DeleteVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/DeleteVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).DeleteVirtualMachine(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_StartVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).StartVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/StartVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).StartVirtualMachine(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_StopVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).StopVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/StopVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).StopVirtualMachine(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_RestartVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).RestartVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/RestartVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).RestartVirtualMachine(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_ListVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).ListVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/ListVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).ListVirtualMachine(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_ListVirtualMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).ListVirtualMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/ListVirtualMachineInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).ListVirtualMachineInstance(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_ListDataVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).ListDataVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/ListDataVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).ListDataVolume(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VirtManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VirtManagementService",
	HandlerType: (*VirtManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVirtualMachine",
			Handler:    _VirtManagementService_CreateVirtualMachine_Handler,
		},
		{
			MethodName: "DeleteVirtualMachine",
			Handler:    _VirtManagementService_DeleteVirtualMachine_Handler,
		},
		{
			MethodName: "StartVirtualMachine",
			Handler:    _VirtManagementService_StartVirtualMachine_Handler,
		},
		{
			MethodName: "StopVirtualMachine",
			Handler:    _VirtManagementService_StopVirtualMachine_Handler,
		},
		{
			MethodName: "RestartVirtualMachine",
			Handler:    _VirtManagementService_RestartVirtualMachine_Handler,
		},
		{
			MethodName: "ListVirtualMachine",
			Handler:    _VirtManagementService_ListVirtualMachine_Handler,
		},
		{
			MethodName: "ListVirtualMachineInstance",
			Handler:    _VirtManagementService_ListVirtualMachineInstance_Handler,
		},
		{
			MethodName: "ListDataVolume",
			Handler:    _VirtManagementService_ListDataVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "virt-operation.proto",
}
